"""
Author: Piergiuseppe Mallozzi
Date: 2024
"""

import pandas as pd

from anomaly_detection.series.base_time_series import BaseTimeSeries


class EventSequenceTimeSeries(BaseTimeSeries):
    """
    Base class for sequences of events, capturing common functionalities.
    """

    def __init__(self, data: pd.DataFrame, event_column: str) -> None:
        """
        Initialize the event sequence time series object.

        Parameters:
            data (pd.DataFrame): The event data, including timestamps for log events or discrete steps for finite state machines.
            event_column (str): The name of the column that contains the event information.
        """
        super().__init__(data)
        self.event_column = event_column

    def preprocess(self) -> None:
        """
        Placeholder for preprocessing steps, such as filtering or cleaning events.
        """
        pass

    def summarize(self) -> pd.DataFrame:
        """
        Provides a summary of the events, such as count by event type.

        Returns:
            pd.DataFrame: Summary of events by type.
        """
        return self.data[self.event_column].value_counts().to_frame(name="count")


class LogEventTimeSeries(EventSequenceTimeSeries):
    """
    Represents a sequence of events with timestamp information, like a log.
    """

    def __init__(self, data: pd.DataFrame, event_column: str, time_column: str) -> None:
        """
        Initialize the log event time series object.

        Parameters:
            data (pd.DataFrame): The event data with timestamps.
            event_column (str): The name of the column that contains the event information.
            time_column (str): The name of the column that contains timestamp information.
        """
        super().__init__(data, event_column)
        self.data[time_column] = pd.to_datetime(self.data[time_column])
        self.data.set_index(time_column, inplace=True)

    def inter_event_times(self) -> pd.Series:
        """
        Calculate and return the inter-event times as a pandas Series.

        Returns:
            pd.Series: Series of inter-event times.
        """
        if len(self.data) > 1:
            return self.data.index.to_series().diff().dropna()
        else:
            return pd.Series(dtype="timedelta64[ns]")


class FiniteStateMachineTimeSeries(EventSequenceTimeSeries):
    """
    Represents a sequence of events on a discrete timeline, like those generated by a finite state machine.
    """

    def __init__(
        self, data: pd.DataFrame, event_column: str, state_column: str
    ) -> None:
        """
        Initialize the finite state machine event series object.

        Parameters:
            data (pd.DataFrame): The state transition data, with each row representing a transition.
            event_column (str): The name of the column that contains the event information leading to state transitions.
            state_column (str): The name of the column that contains the state information.
        """
        super().__init__(data, event_column)
        self.state_column = state_column

    def state_transitions(self) -> pd.DataFrame:
        """
        Analyze state transitions and return a summary DataFrame.

        Returns:
            pd.DataFrame: Summary of state transitions, including counts of transitions from one state to another.
        """
        transitions = (
            self.data.groupby([self.state_column, self.event_column])
            .size()
            .unstack(fill_value=0)
        )
        return transitions
